diff --git a/runtime/bin/eventhandler.h b/runtime/bin/eventhandler.h
index c110d34..a5994b0 100644
--- a/runtime/bin/eventhandler.h
+++ b/runtime/bin/eventhandler.h
@@ -557,6 +557,10 @@ class DescriptorInfoMultipleMixin : public DI {
     if (!disable_tokens_) {
       pentry->token_count += count;
     }
+    if ((!(pentry->token_count <= kTokenCount)) || (pentry->token_count < -50)) {
+      fprintf(stderr, "pentry->token_count: %p kTokenCount: %i\n",
+              reinterpret_cast<void*>(pentry->token_count), kTokenCount);
+    }
     ASSERT(pentry->token_count <= kTokenCount);
     bool is_ready = pentry->token_count > 0 && pentry->IsReady();
     if (!was_ready && is_ready) {
diff --git a/runtime/bin/file_linux.cc b/runtime/bin/file_linux.cc
index 0a437f1..d56ab18 100644
--- a/runtime/bin/file_linux.cc
+++ b/runtime/bin/file_linux.cc
@@ -445,6 +445,7 @@ File::Type File::GetType(const char* pathname, bool follow_links) {
   if (S_ISDIR(entry_info.st_mode)) return File::kIsDirectory;
   if (S_ISREG(entry_info.st_mode)) return File::kIsFile;
   if (S_ISLNK(entry_info.st_mode)) return File::kIsLink;
+  if (S_ISSOCK(entry_info.st_mode)) return File::kIsFile;  // HACK.
   return File::kDoesNotExist;
 }
 
diff --git a/runtime/bin/file_macos.cc b/runtime/bin/file_macos.cc
index 9fc33c5..c6f6de0 100644
--- a/runtime/bin/file_macos.cc
+++ b/runtime/bin/file_macos.cc
@@ -411,6 +411,7 @@ File::Type File::GetType(const char* pathname, bool follow_links) {
   if (S_ISDIR(entry_info.st_mode)) return File::kIsDirectory;
   if (S_ISREG(entry_info.st_mode)) return File::kIsFile;
   if (S_ISLNK(entry_info.st_mode)) return File::kIsLink;
+  if (S_ISSOCK(entry_info.st_mode)) return File::kIsFile;  // HACK.
   return File::kDoesNotExist;
 }
 
diff --git a/runtime/bin/io_natives.cc b/runtime/bin/io_natives.cc
index cbe0c83..cce6f42 100644
--- a/runtime/bin/io_natives.cc
+++ b/runtime/bin/io_natives.cc
@@ -67,8 +67,10 @@ namespace bin {
   V(SecureSocket_Renegotiate, 4)                                               \
   V(ServerSocket_Accept, 2)                                                    \
   V(ServerSocket_CreateBindListen, 6)                                          \
+  V(ServerSocket_CreateBindListenUnix, 3)                                      \
   V(Socket_CreateConnect, 3)                                                   \
   V(Socket_CreateBindConnect, 4)                                               \
+  V(Socket_CreateConnectUnix, 2)                                               \
   V(Socket_CreateBindDatagram, 4)                                              \
   V(Socket_Available, 1)                                                       \
   V(Socket_Read, 2)                                                            \
diff --git a/runtime/bin/socket.cc b/runtime/bin/socket.cc
index ea5154e..5174e33 100644
--- a/runtime/bin/socket.cc
+++ b/runtime/bin/socket.cc
@@ -242,6 +242,23 @@ void FUNCTION_NAME(Socket_CreateBindConnect)(Dart_NativeArguments args) {
 }
 
 
+void FUNCTION_NAME(Socket_CreateConnectUnix)(Dart_NativeArguments args) {
+  RawAddr addr;
+  const char* path =
+      DartUtils::GetStringValue(Dart_GetNativeArgument(args, 1));
+  addr.un.sun_family = AF_UNIX;
+  snprintf(addr.un.sun_path, sizeof(addr.un.sun_path), "%s", path);
+  intptr_t socket = Socket::CreateConnectUnix(addr);
+  OSError error;
+  if (socket >= 0) {
+    Socket::SetSocketIdNativeField(Dart_GetNativeArgument(args, 0), socket);
+    Dart_SetReturnValue(args, Dart_True());
+  } else {
+    Dart_SetReturnValue(args, DartUtils::NewDartOSError(&error));
+  }
+}
+
+
 void FUNCTION_NAME(Socket_CreateBindDatagram)(Dart_NativeArguments args) {
   RawAddr addr;
   SocketAddress::GetSockAddr(Dart_GetNativeArgument(args, 1), &addr);
@@ -570,6 +587,29 @@ void FUNCTION_NAME(ServerSocket_CreateBindListen)(Dart_NativeArguments args) {
 }
 
 
+void FUNCTION_NAME(ServerSocket_CreateBindListenUnix)(
+    Dart_NativeArguments args) {
+  const char* path =
+      DartUtils::GetStringValue(Dart_GetNativeArgument(args, 1));
+  int64_t backlog = DartUtils::GetInt64ValueCheckRange(
+      Dart_GetNativeArgument(args, 2),
+      0,
+      65535);
+  RawAddr addr;
+  addr.un.sun_family = AF_UNIX;
+  snprintf(addr.un.sun_path, sizeof(addr.un.sun_path), "%s", path);
+
+  intptr_t socketfd = ServerSocket::CreateBindListenUnix(addr, backlog);
+  if (socketfd >= 0) {
+    Dart_Handle socket_object = Dart_GetNativeArgument(args, 0);
+    Socket::SetSocketIdNativeField(socket_object, socketfd);
+    Dart_SetReturnValue(args, Dart_True());
+  } else {
+    Dart_SetReturnValue(args, DartUtils::NewDartOSError());
+  }
+}
+
+
 void FUNCTION_NAME(ServerSocket_Accept)(Dart_NativeArguments args) {
   intptr_t socket =
       Socket::GetSocketIdNativeField(Dart_GetNativeArgument(args, 0));
diff --git a/runtime/bin/socket.h b/runtime/bin/socket.h
index 507acd9..f4e8933 100644
--- a/runtime/bin/socket.h
+++ b/runtime/bin/socket.h
@@ -33,6 +33,7 @@ namespace bin {
 union RawAddr {
   struct sockaddr_in in;
   struct sockaddr_in6 in6;
+  struct sockaddr_un un;
   struct sockaddr_storage ss;
   struct sockaddr addr;
 };
@@ -256,6 +257,7 @@ class Socket {
   // specified as the port component of the passed RawAddr structure.
   static intptr_t CreateBindConnect(const RawAddr& addr,
                                     const RawAddr& source_addr);
+  static intptr_t CreateConnectUnix(const RawAddr& addr);
   // Creates a datagram socket which is bound. The port to bind
   // to is specified as the port component of the RawAddr structure.
   static intptr_t CreateBindDatagram(const RawAddr& addr, bool reuseAddress);
@@ -333,6 +335,9 @@ class ServerSocket {
                                    intptr_t backlog,
                                    bool v6_only = false);
 
+  static intptr_t CreateBindListenUnix(const RawAddr& addr,
+                                       intptr_t backlog);
+
   // Start accepting on a newly created listening socket. If it was unable to
   // start accepting incoming sockets, the fd is invalidated.
   static bool StartAccept(intptr_t fd);
diff --git a/runtime/bin/socket_linux.cc b/runtime/bin/socket_linux.cc
index 976bd0f..aed842f 100644
--- a/runtime/bin/socket_linux.cc
+++ b/runtime/bin/socket_linux.cc
@@ -101,6 +101,22 @@ intptr_t Socket::CreateBindConnect(const RawAddr& addr,
 }
 
 
+intptr_t Socket::CreateConnectUnix(const RawAddr& addr) {
+  intptr_t fd = Create(addr);
+  if (fd < 0) {
+    return fd;
+  }
+
+  intptr_t result = TEMP_FAILURE_RETRY(
+      connect(fd, &addr.addr, sizeof(struct sockaddr_un)));
+  if (result == 0 || errno == EINPROGRESS) {
+    return fd;
+  }
+  VOID_TEMP_FAILURE_RETRY(close(fd));
+  return -1;
+}
+
+
 intptr_t Socket::Available(intptr_t fd) {
   return FDUtils::AvailableBytes(fd);
 }
@@ -410,6 +426,29 @@ intptr_t ServerSocket::CreateBindListen(const RawAddr& addr,
 }
 
 
+intptr_t ServerSocket::CreateBindListenUnix(const RawAddr& addr,
+                                            intptr_t backlog) {
+  intptr_t fd;
+
+  fd = NO_RETRY_EXPECTED(
+      socket(addr.ss.ss_family, SOCK_STREAM | SOCK_CLOEXEC | SOCK_NONBLOCK, 0));
+  if (fd < 0) return -1;
+
+  if (NO_RETRY_EXPECTED(
+          bind(fd, &addr.addr, sizeof(struct sockaddr_un))) < 0) {
+    VOID_TEMP_FAILURE_RETRY(close(fd));
+    return -1;
+  }
+
+  if (NO_RETRY_EXPECTED(listen(fd, backlog > 0 ? backlog : SOMAXCONN)) != 0) {
+    VOID_TEMP_FAILURE_RETRY(close(fd));
+    return -1;
+  }
+
+  return fd;
+}
+
+
 bool ServerSocket::StartAccept(intptr_t fd) {
   USE(fd);
   return true;
diff --git a/runtime/bin/socket_linux.h b/runtime/bin/socket_linux.h
index 4ad0db2..b458f9f 100644
--- a/runtime/bin/socket_linux.h
+++ b/runtime/bin/socket_linux.h
@@ -8,5 +8,6 @@
 #include <arpa/inet.h>
 #include <netdb.h>
 #include <sys/socket.h>
+#include <sys/un.h>
 
 #endif  // BIN_SOCKET_LINUX_H_
diff --git a/runtime/bin/socket_macos.cc b/runtime/bin/socket_macos.cc
index 205793b..8351790 100644
--- a/runtime/bin/socket_macos.cc
+++ b/runtime/bin/socket_macos.cc
@@ -109,6 +109,22 @@ intptr_t Socket::CreateBindConnect(const RawAddr& addr,
 }
 
 
+intptr_t Socket::CreateConnectUnix(const RawAddr& addr) {
+  intptr_t fd = Create(addr);
+  if (fd < 0) {
+    return fd;
+  }
+
+  intptr_t result = TEMP_FAILURE_RETRY(
+      connect(fd, &addr.addr, sizeof(struct sockaddr_un)));
+  if (result == 0 || errno == EINPROGRESS) {
+    return fd;
+  }
+  VOID_TEMP_FAILURE_RETRY(close(fd));
+  return -1;
+}
+
+
 intptr_t Socket::Available(intptr_t fd) {
   return FDUtils::AvailableBytes(fd);
 }
@@ -416,6 +432,32 @@ intptr_t ServerSocket::CreateBindListen(const RawAddr& addr,
 }
 
 
+intptr_t ServerSocket::CreateBindListenUnix(const RawAddr& addr,
+                                            intptr_t backlog) {
+  intptr_t fd;
+
+  fd = NO_RETRY_EXPECTED(
+      socket(addr.ss.ss_family, SOCK_STREAM, 0));
+  if (fd < 0) return -1;
+
+  FDUtils::SetCloseOnExec(fd);
+
+  if (NO_RETRY_EXPECTED(
+          bind(fd, &addr.addr, sizeof(struct sockaddr_un))) < 0) {
+    VOID_TEMP_FAILURE_RETRY(close(fd));
+    return -1;
+  }
+
+  if (NO_RETRY_EXPECTED(listen(fd, backlog > 0 ? backlog : SOMAXCONN)) != 0) {
+    VOID_TEMP_FAILURE_RETRY(close(fd));
+    return -1;
+  }
+
+  FDUtils::SetNonBlocking(fd);
+  return fd;
+}
+
+
 bool ServerSocket::StartAccept(intptr_t fd) {
   USE(fd);
   return true;
diff --git a/runtime/bin/socket_macos.h b/runtime/bin/socket_macos.h
index b77857c..5058d46 100644
--- a/runtime/bin/socket_macos.h
+++ b/runtime/bin/socket_macos.h
@@ -8,5 +8,6 @@
 #include <arpa/inet.h>
 #include <netdb.h>
 #include <sys/socket.h>
+#include <sys/un.h>
 
 #endif  // BIN_SOCKET_MACOS_H_
diff --git a/runtime/bin/socket_patch.dart b/runtime/bin/socket_patch.dart
index 94285aa..300dc88 100644
--- a/runtime/bin/socket_patch.dart
+++ b/runtime/bin/socket_patch.dart
@@ -303,7 +303,7 @@ class _NativeSocket extends _NativeSocketNativeWrapper with _ServiceObject {
   int localPort = 0;
 
   // Holds the address used to connect or bind the socket.
-  InternetAddress localAddress;
+  var /* InternetAddress or UnixDomainAddress */ localAddress;
 
   int available = 0;
 
@@ -393,6 +393,7 @@ class _NativeSocket extends _NativeSocketNativeWrapper with _ServiceObject {
     return new Future.value(host)
         .then((host) {
           if (host is _InternetAddress) return [host];
+          if (host is UnixDomainAddress) return [host];
           return lookup(host)
               .then((addresses) {
                 if (addresses.isEmpty) {
@@ -420,7 +421,11 @@ class _NativeSocket extends _NativeSocketNativeWrapper with _ServiceObject {
             socket.localAddress = address;
             var result;
             if (sourceAddress == null) {
-              result = socket.nativeCreateConnect(address._in_addr, port);
+              if (address is UnixDomainAddress) {
+                result = socket.nativeCreateConnectUnix(address.path);
+              } else {
+                result = socket.nativeCreateConnect(address._in_addr, port);
+              }
             } else {
               assert(sourceAddress is _InternetAddress);
               result = socket.nativeCreateBindConnect(
@@ -434,7 +439,9 @@ class _NativeSocket extends _NativeSocketNativeWrapper with _ServiceObject {
               connectNext();
             } else {
               // Query the local port, for error messages.
-              socket.port;
+              if (address is !UnixDomainAddress) {
+                socket.port;
+              }
               // Set up timer for when we should retry the next address
               // (if any).
               var duration = address.isLoopback ?
@@ -481,6 +488,7 @@ class _NativeSocket extends _NativeSocketNativeWrapper with _ServiceObject {
     return new Future.value(host)
         .then((host) {
           if (host is _InternetAddress) return host;
+          if (host is UnixDomainAddress) return host;
           return lookup(host)
               .then((list) {
                 if (list.length == 0) {
@@ -493,11 +501,22 @@ class _NativeSocket extends _NativeSocketNativeWrapper with _ServiceObject {
           var socket = new _NativeSocket.listen();
           socket.localAddress = address;
 
-          var result = socket.nativeCreateBindListen(address._in_addr,
-                                                     port,
-                                                     backlog,
-                                                     v6Only,
-                                                     shared);
+          var result;
+          if (host is UnixDomainAddress) {
+            result = socket.nativeCreateBindListenUnix(host.path,
+                                                       backlog);
+            if (result is OSError) {
+              throw new SocketException("Failed to create server socket",
+                                        osError: result);
+          }
+          } else {
+            result = socket.nativeCreateBindListen(address._in_addr,
+                                                   port,
+                                                   backlog,
+                                                   v6Only,
+                                                   shared);
+          }
+
           if (result is OSError) {
             throw new SocketException("Failed to create server socket",
                                       osError: result,
@@ -693,7 +712,7 @@ class _NativeSocket extends _NativeSocketNativeWrapper with _ServiceObject {
     return result[1];
   }
 
-  InternetAddress get address => localAddress;
+  /* InternetAddress or UnixDomainAddress */ get address => localAddress;
 
   InternetAddress get remoteAddress {
     if (isClosing || isClosed) throw const SocketException.closed();
@@ -927,7 +946,7 @@ class _NativeSocket extends _NativeSocketNativeWrapper with _ServiceObject {
   // error objects.
   static createError(error,
                      String message,
-                     [InternetAddress address,
+                     [address,
                       int port]) {
     if (error is OSError) {
       return new SocketException(
@@ -1149,9 +1168,12 @@ class _NativeSocket extends _NativeSocketNativeWrapper with _ServiceObject {
   nativeCreateBindConnect(
       List<int> addr, int port, List<int> sourceAddr)
       native "Socket_CreateBindConnect";
+  nativeCreateConnectUnix(String path) native "Socket_CreateConnectUnix";
   nativeCreateBindListen(List<int> addr, int port, int backlog, bool v6Only,
                          bool shared)
       native "ServerSocket_CreateBindListen";
+  nativeCreateBindListenUnix(String addr, int backlog)
+      native "ServerSocket_CreateBindListenUnix";
   nativeCreateBindDatagram(List<int> addr, int port, bool reuseAddress)
       native "Socket_CreateBindDatagram";
   nativeAccept(_NativeSocket socket) native "ServerSocket_Accept";
@@ -1211,7 +1233,9 @@ class _RawServerSocket extends Stream<RawSocket>
       read: zone.bindCallback(() {
         while (_socket.available > 0) {
           var socket = _socket.accept();
-          if (socket == null) return;
+          if (socket == null) {
+            return;
+          }
           _controller.add(new _RawSocket(socket));
           if (_controller.isPaused) return;
         }
diff --git a/sdk/lib/io/socket.dart b/sdk/lib/io/socket.dart
index a759598..5516f00 100644
--- a/sdk/lib/io/socket.dart
+++ b/sdk/lib/io/socket.dart
@@ -144,6 +144,13 @@ abstract class InternetAddress {
 }
 
 
+class UnixDomainAddress {
+  final String path;
+  bool get isLoopback => false;  // HACK.
+  UnixDomainAddress(this.path);
+}
+
+
 /**
  * A [NetworkInterface] represent an active network interface on the current
  * system. It contains a list of [InternetAddress]s, that's bound to the
@@ -759,7 +766,7 @@ abstract class RawDatagramSocket extends Stream<RawSocketEvent> {
 class SocketException implements IOException {
   final String message;
   final OSError osError;
-  final InternetAddress address;
+  final /* InternetAddress or UnixDomainAddress */ address;
   final int port;
 
   const SocketException(this.message, {this.osError, this.address, this.port});
