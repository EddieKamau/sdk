// Copyright (c) 2012, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

#include "src/vm/unicode.h"

#include "src/vm/object.h"

namespace fletch {

const int8_t Utf8::kTrailBytes[256] = {
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 0, 0
};

const uint32 Utf8::kMagicBits[7] = {
  0,  // Padding.
  0x00000000,
  0x00003080,
  0x000E2080,
  0x03C82080,
  0xFA082080,
  0x82082080
};


// Minimum values of code points used to check shortest form.
const uint32 Utf8::kOverlongMinimum[7] = {
  0,  // Padding.
  0x0,
  0x80,
  0x800,
  0x10000,
  0xFFFFFFFF,
  0xFFFFFFFF
};

CodePointIterator::CodePointIterator(String* str)
    : str_(str),
      ch_(0),
      index_(-1),
      end_(str->length()) {
}

bool CodePointIterator::Next() {
  ASSERT(index_ >= -1);
  word length = Utf16::Length(ch_);
  if (index_ < (end_ - length)) {
    index_ += length;
    ch_ = str_->get_code_unit(index_);
    if (Utf16::IsLeadSurrogate(ch_) && (index_ < (end_ - 1))) {
      int32 ch2 = str_->get_code_unit(index_ + 1);
      if (Utf16::IsTrailSurrogate(ch2)) {
        ch_ = Utf16::Decode(ch_, ch2);
      }
    }
    return true;
  }
  index_ = end_;
  return false;
}

word Utf8::Length(int32 ch) {
  if (ch <= kMaxOneByteChar) {
    return 1;
  } else if (ch <= kMaxTwoByteChar) {
    return 2;
  } else if (ch <= kMaxThreeByteChar) {
    return 3;
  }
  ASSERT(ch <= kMaxFourByteChar);
  return 4;
}

word Utf8::Length(String* str) {
  word length = 0;
  CodePointIterator it(str);
  while (it.Next()) {
    int32 ch = it.Current();
    length += Utf8::Length(ch);
  }
  return length;
}

word Utf8::Encode(int32 ch, char* dst) {
  static const int kMask = ~(1 << 6);
  if (ch <= kMaxOneByteChar) {
    dst[0] = ch;
    return 1;
  }
  if (ch <= kMaxTwoByteChar) {
    dst[0] = 0xC0 | (ch >> 6);
    dst[1] = 0x80 | (ch & kMask);
    return 2;
  }
  if (ch <= kMaxThreeByteChar) {
    dst[0] = 0xE0 | (ch >> 12);
    dst[1] = 0x80 | ((ch >> 6) & kMask);
    dst[2] = 0x80 | (ch & kMask);
    return 3;
  }
  ASSERT(ch <= kMaxFourByteChar);
  dst[0] = 0xF0 | (ch >> 18);
  dst[1] = 0x80 | ((ch >> 12) & kMask);
  dst[2] = 0x80 | ((ch >> 6) & kMask);
  dst[3] = 0x80 | (ch & kMask);
  return 4;
}

word Utf8::Encode(String* src, char* dst, word len) {
  word pos = 0;
  CodePointIterator it(src);
  while (it.Next()) {
    int32 ch = it.Current();
    word num_bytes = Utf8::Length(ch);
    if (pos + num_bytes > len) {
      break;
    }
    Utf8::Encode(ch, &dst[pos]);
    pos += num_bytes;
  }
  return pos;
}

void Utf16::Encode(int32 codepoint, uint16_t* dst) {
  ASSERT(codepoint > Utf16::kMaxCodeUnit);
  ASSERT(dst != NULL);
  dst[0] = (Utf16::kLeadSurrogateOffset + (codepoint >> 10));
  dst[1] = (0xDC00 + (codepoint & 0x3FF));
}

int32 CaseMapping::Convert(int32 ch, int32 mapping) {
  if (Utf::IsLatin1(ch)) {
    int32 info = kStage2[ch];
    if ((info & kTypeMask) == mapping) {
      ch += info >> kTypeShift;
    }
  } else if (ch <= (kStage1Size << kBlockSizeLog2)) {
    int16_t offset = kStage1[ch >> kBlockSizeLog2] << kBlockSizeLog2;
    int32 info = kStage2[offset + (ch & (kBlockSize - 1))];
    int32 type = info & kTypeMask;
    if (type == mapping) {
      ch += (info >> kTypeShift);
    } else if (type == kException) {
      ch += kStage2Exception[info >> kTypeShift][mapping - 1];
    }
  }
  return ch;
}

const uint8_t CaseMapping::kStage1[261] = {
  0, 1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 9, 10, 6, 11, 6, 6, 12, 6, 6, 6,
  6, 6, 6, 6, 13, 14, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  6, 6, 6, 6, 6, 6, 15, 16, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 17, 6, 6, 6, 6,
  18,
};

const int16_t CaseMapping::kStage2[4864] = {
  // block 0
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 130, 130, 130, 130, 130, 130, 130,
  130, 130, 130, 130, 130, 130, 130, 130,
  130, 130, 130, 130, 130, 130, 130, 130,
  130, 130, 130, 0, 0, 0, 0, 0,
  0, -127, -127, -127, -127, -127, -127, -127,
  -127, -127, -127, -127, -127, -127, -127, -127,
  -127, -127, -127, -127, -127, -127, -127, -127,
  -127, -127, -127, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 2973, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  130, 130, 130, 130, 130, 130, 130, 130,
  130, 130, 130, 130, 130, 130, 130, 130,
  130, 130, 130, 130, 130, 130, 130, 0,
  130, 130, 130, 130, 130, 130, 130, 0,
  -127, -127, -127, -127, -127, -127, -127, -127,
  -127, -127, -127, -127, -127, -127, -127, -127,
  -127, -127, -127, -127, -127, -127, -127, 0,
  -127, -127, -127, -127, -127, -127, -127, 485,
  // block 1
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  -794, -927, 6, -3, 6, -3, 6, -3,
  0, 6, -3, 6, -3, 6, -3, 6,
  -3, 6, -3, 6, -3, 6, -3, 6,
  -3, 0, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  -482, 6, -3, 6, -3, 6, -3, -1199,
  781, 842, 6, -3, 6, -3, 826, 6,
  -3, 822, 822, 6, -3, 0, 318, 810,
  814, 6, -3, 822, 830, 389, 846, 838,
  6, -3, 653, 0, 846, 854, 521, 858,
  6, -3, 6, -3, 6, -3, 874, 6,
  -3, 874, 0, 0, 6, -3, 874, 6,
  -3, 870, 870, 6, -3, 6, -3, 878,
  6, -3, 0, 0, 6, -3, 0, 225,
  0, 0, 0, 0, 10, 3, -7, 10,
  7, -7, 10, 11, -7, 6, -3, 6,
  -3, 6, -3, 6, -3, 6, -3, 6,
  -3, 6, -3, 6, -3, -315, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  0, 10, 15, -7, 6, -3, -386, -222,
  6, -3, 6, -3, 6, -3, 6, -3,
  // block 2
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  -518, 0, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 0, 0, 0, 0,
  0, 0, 19, 6, -3, -650, 23, 0,
  0, 6, -3, -778, 278, 286, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  27, 31, 0, -839, -823, 0, -819, -819,
  0, -807, 0, -811, 0, 0, 0, 0,
  -819, 0, 0, -827, 0, 0, 0, 0,
  -835, -843, 0, 35, 0, 0, 0, -843,
  0, 39, -851, 0, 0, -855, 0, 0,
  0, 0, 0, 0, 0, 43, 0, 0,
  -871, 0, 0, -871, 0, 0, 0, 0,
  -871, -275, -867, -867, -283, 0, 0, 0,
  0, 0, -875, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  // block 3
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 337, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  6, -3, 6, -3, 0, 0, 6, -3,
  0, 0, 0, 521, 521, 521, 0, 0,
  0, 0, 0, 0, 0, 0, 154, 0,
  150, 150, 150, 0, 258, 0, 254, 254,
  0, 130, 130, 130, 130, 130, 130, 130,
  130, 130, 130, 130, 130, 130, 130, 130,
  130, 130, 0, 130, 130, 130, 130, 130,
  130, 130, 130, 130, -151, -147, -147, -147,
  0, -127, -127, -127, -127, -127, -127, -127,
  -127, -127, -127, -127, -127, -127, -127, -127,
  -127, -127, -123, -127, -127, -127, -127, -127,
  -127, -127, -127, -127, -255, -251, -251, 34,
  -247, -227, 0, 0, 0, -187, -215, -31,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  -343, -319, 29, 0, -238, -383, 0, 6,
  -3, -26, 6, -3, 0, -518, -518, -518,
  // block 4
  322, 322, 322, 322, 322, 322, 322, 322,
  322, 322, 322, 322, 322, 322, 322, 322,
  130, 130, 130, 130, 130, 130, 130, 130,
  130, 130, 130, 130, 130, 130, 130, 130,
  130, 130, 130, 130, 130, 130, 130, 130,
  130, 130, 130, 130, 130, 130, 130, 130,
  -127, -127, -127, -127, -127, -127, -127, -127,
  -127, -127, -127, -127, -127, -127, -127, -127,
  -127, -127, -127, -127, -127, -127, -127, -127,
  -127, -127, -127, -127, -127, -127, -127, -127,
  -319, -319, -319, -319, -319, -319, -319, -319,
  -319, -319, -319, -319, -319, -319, -319, -319,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 0, 0, 0, 0, 0, 0,
  0, 0, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  62, 6, -3, 6, -3, 6, -3, 6,
  -3, 6, -3, 6, -3, 6, -3, -59,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  // block 5
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 194, 194, 194, 194, 194, 194, 194,
  194, 194, 194, 194, 194, 194, 194, 194,
  194, 194, 194, 194, 194, 194, 194, 194,
  194, 194, 194, 194, 194, 194, 194, 194,
  194, 194, 194, 194, 194, 194, 194, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, -191, -191, -191, -191, -191, -191, -191,
  -191, -191, -191, -191, -191, -191, -191, -191,
  -191, -191, -191, -191, -191, -191, -191, -191,
  -191, -191, -191, -191, -191, -191, -191, -191,
  -191, -191, -191, -191, -191, -191, -191, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  // block 6
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  // block 7
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  29058, 29058, 29058, 29058, 29058, 29058, 29058, 29058,
  29058, 29058, 29058, 29058, 29058, 29058, 29058, 29058,
  29058, 29058, 29058, 29058, 29058, 29058, 29058, 29058,
  29058, 29058, 29058, 29058, 29058, 29058, 29058, 29058,
  29058, 29058, 29058, 29058, 29058, 29058, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  // block 8
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 47, 0, 0, 0, 15257, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  // block 9
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 0, 0,
  0, 0, 0, -235, 0, 0, -30458, 0,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  // block 10
  33, 33, 33, 33, 33, 33, 33, 33,
  -30, -30, -30, -30, -30, -30, -30, -30,
  33, 33, 33, 33, 33, 33, 0, 0,
  -30, -30, -30, -30, -30, -30, 0, 0,
  33, 33, 33, 33, 33, 33, 33, 33,
  -30, -30, -30, -30, -30, -30, -30, -30,
  33, 33, 33, 33, 33, 33, 33, 33,
  -30, -30, -30, -30, -30, -30, -30, -30,
  33, 33, 33, 33, 33, 33, 0, 0,
  -30, -30, -30, -30, -30, -30, 0, 0,
  0, 33, 0, 33, 0, 33, 0, 33,
  0, -30, 0, -30, 0, -30, 0, -30,
  33, 33, 33, 33, 33, 33, 33, 33,
  -30, -30, -30, -30, -30, -30, -30, -30,
  297, 297, 345, 345, 345, 345, 401, 401,
  513, 513, 449, 449, 505, 505, 0, 0,
  33, 33, 33, 33, 33, 33, 33, 33,
  -30, -30, -30, -30, -30, -30, -30, -30,
  33, 33, 33, 33, 33, 33, 33, 33,
  -30, -30, -30, -30, -30, -30, -30, -30,
  33, 33, 33, 33, 33, 33, 33, 33,
  -30, -30, -30, -30, -30, -30, -30, -30,
  33, 33, 0, 37, 0, 0, 0, 0,
  -30, -30, -294, -294, -34, 0, -28819, 0,
  0, 0, 0, 37, 0, 0, 0, 0,
  -342, -342, -342, -342, -34, 0, 0, 0,
  33, 33, 0, 0, 0, 0, 0, 0,
  -30, -30, -398, -398, 0, 0, 0, 0,
  33, 33, 0, 0, 0, 29, 0, 0,
  -30, -30, -446, -446, -26, 0, 0, 0,
  0, 0, 0, 37, 0, 0, 0, 0,
  -510, -510, -502, -502, -34, 0, 0, 0,
  // block 11
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, -30066, 0,
  0, 0, 51, 55, 0, 0, 0, 0,
  0, 0, 114, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, -111, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  66, 66, 66, 66, 66, 66, 66, 66,
  66, 66, 66, 66, 66, 66, 66, 66,
  -63, -63, -63, -63, -63, -63, -63, -63,
  -63, -63, -63, -63, -63, -63, -63, -63,
  0, 0, 0, 6, -3, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  // block 12
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 106, 106,
  106, 106, 106, 106, 106, 106, 106, 106,
  106, 106, 106, 106, 106, 106, 106, 106,
  106, 106, 106, 106, 106, 106, 106, 106,
  -103, -103, -103, -103, -103, -103, -103, -103,
  -103, -103, -103, -103, -103, -103, -103, -103,
  -103, -103, -103, -103, -103, -103, -103, -103,
  -103, -103, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  // block 13
  194, 194, 194, 194, 194, 194, 194, 194,
  194, 194, 194, 194, 194, 194, 194, 194,
  194, 194, 194, 194, 194, 194, 194, 194,
  194, 194, 194, 194, 194, 194, 194, 194,
  194, 194, 194, 194, 194, 194, 194, 194,
  194, 194, 194, 194, 194, 194, 194, 0,
  -191, -191, -191, -191, -191, -191, -191, -191,
  -191, -191, -191, -191, -191, -191, -191, -191,
  -191, -191, -191, -191, -191, -191, -191, -191,
  -191, -191, -191, -191, -191, -191, -191, -191,
  -191, -191, -191, -191, -191, -191, -191, -191,
  -191, -191, -191, -191, -191, -191, -191, 0,
  6, -3, 59, -15254, 63, 67, 71, 6,
  -3, 6, -3, 6, -3, 75, 79, 83,
  0, 0, 6, -3, 0, 6, -3, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  // block 14
  -29055, -29055, -29055, -29055, -29055, -29055, -29055, -29055,
  -29055, -29055, -29055, -29055, -29055, -29055, -29055, -29055,
  -29055, -29055, -29055, -29055, -29055, -29055, -29055, -29055,
  -29055, -29055, -29055, -29055, -29055, -29055, -29055, -29055,
  -29055, -29055, -29055, -29055, -29055, -29055, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  // block 15
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  0, 0, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  // block 16
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  0, 0, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 6, -3, 6, -3, 87, 6, -3,
  6, -3, 6, -3, 6, -3, 6, -3,
  0, 0, 0, 6, -3, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  // block 17
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 130, 130, 130, 130, 130, 130, 130,
  130, 130, 130, 130, 130, 130, 130, 130,
  130, 130, 130, 130, 130, 130, 130, 130,
  130, 130, 130, 0, 0, 0, 0, 0,
  0, -127, -127, -127, -127, -127, -127, -127,
  -127, -127, -127, -127, -127, -127, -127, -127,
  -127, -127, -127, -127, -127, -127, -127, -127,
  -127, -127, -127, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  // block 18
  162, 162, 162, 162, 162, 162, 162, 162,
  162, 162, 162, 162, 162, 162, 162, 162,
  162, 162, 162, 162, 162, 162, 162, 162,
  162, 162, 162, 162, 162, 162, 162, 162,
  162, 162, 162, 162, 162, 162, 162, 162,
  -159, -159, -159, -159, -159, -159, -159, -159,
  -159, -159, -159, -159, -159, -159, -159, -159,
  -159, -159, -159, -159, -159, -159, -159, -159,
  -159, -159, -159, -159, -159, -159, -159, -159,
  -159, -159, -159, -159, -159, -159, -159, -159,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
};

const int32 CaseMapping::kStage2Exception[22][2] = {
  { -1, 1 },  // U+01C5
  { -1, 1 },  // U+01C8
  { -1, 1 },  // U+01CB
  { -1, 1 },  // U+01F2
  { 0, 10795 },  // U+023A
  { 0, 10792 },  // U+023E
  { 10783, 0 },  // U+0250
  { 10780, 0 },  // U+0251
  { 10743, 0 },  // U+026B
  { 10749, 0 },  // U+0271
  { 10727, 0 },  // U+027D
  { 35332, 0 },  // U+1D79
  { 0, -8383 },  // U+212A
  { 0, -8262 },  // U+212B
  { 0, -10743 },  // U+2C62
  { 0, -10727 },  // U+2C64
  { -10795, 0 },  // U+2C65
  { -10792, 0 },  // U+2C66
  { 0, -10780 },  // U+2C6D
  { 0, -10749 },  // U+2C6E
  { 0, -10783 },  // U+2C6F
  { 0, -35332 },  // U+A77D
};

}  // namespace fletch
