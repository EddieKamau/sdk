# Copyright (c) 2014, the Fletch project authors. Please see the AUTHORS file
# for details. All rights reserved. Use of this source code is governed by a
# BSD-style license that can be found in the LICENSE.md file.

# SCons build description file.
# See http://scons.org/.

import os
from os.path import join

# Import the compilation context from the calling SConstruct file.
Import("context")

# Setup shorthands.
env = context.environment
config = context.configuration
files = context.files["vm"]
double_conversion_objects = context.double_conversion_objects
shared = context.shared["objects"]
test_main_object = context.shared["test_main_object"]

# Filter out header files from lists.
def FilterSourceFiles(files):
  return [ f for f in files if not f.endswith(".h") ]

# Helper functions for the tests generator action.
def GenerateAssembly(env, target, source):
  return os.system(str(source[0]) + " > " + str(target[0]))

def ShowAssemblyGeneration(target, source, env):
  print "Generating assembly: " + str(source[0]) + " > " + str(target[0])

# Setup compilation of the library.
library_files = FilterSourceFiles(files["library"][config])
library_objects = [ env.Object(file) for file in library_files ]
library_objects += shared
library_objects += double_conversion_objects

# Setup compilation of the generator program.
generator_files = FilterSourceFiles(files["generator"][config])
generator = env.Program("generator", [ generator_files, library_objects ])
action = Action(GenerateAssembly, ShowAssemblyGeneration)
generated_file = env.Command("generated.S", generator, action)
generated_object = env.Object(generated_file)

# Setup compilation of the main program.
library_objects += generated_object
programs = []
program_files = FilterSourceFiles(files["main"][config])
program_object = env.Object(program_files)
programs.append({ "name": "fletch",
                  "objects": [ program_object, library_objects ],
                  "env": "default" });

# Setup compilation of the C++ tests.
test_env = env.Clone()
test_env.Append(CPPDEFINES=["TESTING"])

test_files = FilterSourceFiles(files["test"][config])
test_objects = [ test_env.Object(test) for test in test_files ]
tests = [ test_env.Program("run_tests",
                           [ test_main_object,
                             test_objects,
                             library_objects ]) ]

# Let the result of building a variant be the list of targets
# including all C++ tests.
result = { "programs": programs,
           "tests": tests,
           "vm_library_objects": library_objects }

Return("result")
