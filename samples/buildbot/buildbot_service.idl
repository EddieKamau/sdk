// Copyright (c) 2015, the Fletch project authors. Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE.md file.


// Imaginary presentation description:
//
//    node Console {
//      string title;
//      string status;
//      List<CommitNode> commits;
//    }
//
//    node Commit {
//      int32 revision;
//      string author;
//      string message;
//    }
//
// From this description we generate the files:
//
//    dart/commit_node.dart
//    dart/console_node.dart
//    dart/console_presenter_base.dart
//    dart/presentation_graph.dart
//    dart/presentation_utils.dart
//
//    objc/CommitNode.{h,mm}
//    objc/ConsoleNode.{h,mm}
//    objc/ConsolePresenter.{h,mm}
//    objc/PresentationUtils.{h,mm}
//
// For communtication also we define the service structures below for
// communtication which results in the files:
//
//   dart/buildbot_service.dart
//   dart/struct.dart
//
//   cc/buildbot_service.{h,cc}
//   cc/struct.{h,cc}


// Internal service layer
service BuildBotService {
  BuildBotPatchData* refresh();
}

// Node structures.

struct ConsoleNodeData {
  String title;
  String status;
  List<CommitNodeData> commits;
}

struct CommitNodeData {
  int32 revision;
  String author;
  String message;
}

// Patch structures.

// TODO(zerny): Do we want to hook up several root presenters in this way?
struct BuildBotPatchData {
  union {
    void noPatch;
    ConsolePatchData consolePatch;
  }
}

struct ConsolePatchData {
  union {
    ConsoleNodeData replace;
    List<ConsoleUpdatePatchData> updates;
  }
}

struct ConsoleUpdatePatchData {
  union {
    String title;
    String status;
    CommitListPatchData commits;
  }
}

struct CommitPatchData {
  union {
    CommitNodeData replace;
    List<CommitUpdatePatchData> updates;
  }
}

struct CommitUpdatePatchData {
  union {
    int32 revision;
    String author;
    String message;
  }
}

struct CommitListPatchData {
  List<CommitListUpdatePatchData> updates;
}

struct CommitListUpdatePatchData {
  uint32 index;
  union {
    List<CommitNodeData> insert;
    List<CommitPatchData> patch;
    uint32 remove;
  }
}
