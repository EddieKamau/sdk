// Copyright (c) 2016, the Dartino project authors. Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE.md file.

// This library defines a bitmap font class and instance that prints text
// on the Raspberry Pi Sense HAT LED array.
library sample.ticker.font;

import 'dart:math';

import 'package:charcode/ascii.dart';
import 'package:raspberry_pi/sense_hat.dart';

/// A bitmap, fixed-width font which can display itself on [SenseHatLEDArray].
class Font {
  /// Width of each character.
  final int width;

  /// Height of each character.
  final int height;

  /// Bitness of the data.
  ///
  /// When this is `1` (the default) each pixel can either be fully on or
  /// fully off, nothing in between. E.g., when it is `2`, each pixel can assume
  /// any of four (2<sup>2</sup>) intensity values. This allows for
  /// anti-aliased fonts.
  static const int bitsPerPixel = 1;

  /// The maximum brightness value of each pixel. Given by [bitsPerPixel].
  ///
  /// Given by [:pow(2, bitsPerPixel) - 1:].
  static const int _maxCompressedValue = 1;

  /// A list of pre-computed colors on a spectrum from least luminous ("off")
  /// to most luminous ("on").
  ///
  /// This is currently a compile-time constant but there's room for this to
  /// be computed in the constructor based on a) the color in which the user
  /// want the text to appear, b) the value of [bitsPerPixel].
  static const List<Color> _colors = const [Color.black, Color.white];

  /// The starting character in the bitmap. All characters below this one
  /// in the ASCII table will be presented as blank space.
  final int startOrdinal;

  /// The underlying data.
  ///
  /// Each byte represents, in binary form, one column of a sprite board.
  /// This sprite board contains all the characters in an ASCII continuum
  /// from [startOrdinal] onwards.
  final List<int> _bytes;

  Font(this.width, this.height, List<int> bytes, {this.startOrdinal: $space})
      : _bytes = bytes;

  /// Display [message] on given [ledArray] shifted by [offset] pixels
  /// to the left.
  void display(SenseHatLEDArray ledArray, String message, int offset) {
    int topPadding = (ledArray.height - height) ~/ 2;
    // Go through the LED matrix by column, from left to right.
    for (int ledX = 0; ledX < ledArray.width; ledX++) {
      int columnIndex = offset + ledX;
      if (columnIndex < 0) {
        // The whole message is to the right.
        continue;
      }
      int charIndex = columnIndex ~/ width;
      if (charIndex >= message.length) {
        // The whole message is to the left.
        break;
      }
      int char = message.codeUnitAt(charIndex);
      if (!hasCodeUnit(char)) {
        // We don't have data for the character.
        if (hasCodeUnit($space)) {
          char = $space;
        } else {
          // We don't even have data for space. For sake of brevity, let's
          // just ignore this problem. (Ideally, we'd clear the column.)
          continue;
        }
      }
      // Compute index of the column byte in [bytes].
      int index = width * (char - startOrdinal) + (offset + ledX) % width;
      int byte = _bytes[index];
      for (int ledY = 0; ledY < min(ledArray.height, height); ledY++) {
        // Create a bit mask, for example 0b00100000 for the sixth row in
        // a 1-bit-per-pixel font.
        int mask = _maxCompressedValue << (ledY * bitsPerPixel);
        // Get the value of the pixel and bit-shift it back to the right.
        int compressedValue = (byte & mask) >> (ledY * bitsPerPixel);
        ledArray.setPixel(ledX, topPadding + ledY, _colors[compressedValue]);
      }
    }
  }

  /// Returns `true` if the the font has font data for [codeUnit].
  bool hasCodeUnit(int codeUnit) => codeUnit >= startOrdinal &&
      codeUnit <= startOrdinal + _bytes.length ~/ width - 1;
}

/// The default font instance.
final Font defaultFont = new Font(6, 8, _DEFAULT_FONT_BYTES);

/// Data for [font].
const List<int> _DEFAULT_FONT_BYTES = const <int>[
  0x0,
  0x0,
  0x0,
  0x0,
  0x0,
  0x0,
  0x0,
  0x0,
  0x5f,
  0x0,
  0x0,
  0x0,
  0x0,
  0x3,
  0x0,
  0x3,
  0x0,
  0x0,
  0x24,
  0x7e,
  0x24,
  0x7e,
  0x24,
  0x0,
  0x8,
  0x54,
  0xfe,
  0x54,
  0x20,
  0x0,
  0x46,
  0x26,
  0x18,
  0x64,
  0x62,
  0x0,
  0x24,
  0x52,
  0x5a,
  0x26,
  0x50,
  0x0,
  0x0,
  0x0,
  0x6,
  0x3,
  0x0,
  0x0,
  0x0,
  0x7e,
  0x81,
  0x0,
  0x0,
  0x0,
  0x0,
  0x0,
  0x81,
  0x7e,
  0x0,
  0x0,
  0x0,
  0x28,
  0x1c,
  0x28,
  0x0,
  0x0,
  0x8,
  0x8,
  0x3e,
  0x8,
  0x8,
  0x0,
  0x0,
  0xc0,
  0x60,
  0x0,
  0x0,
  0x0,
  0x8,
  0x8,
  0x8,
  0x8,
  0x8,
  0x0,
  0x0,
  0x60,
  0x60,
  0x0,
  0x0,
  0x0,
  0x40,
  0x20,
  0x18,
  0x4,
  0x2,
  0x0,
  0x3c,
  0x62,
  0x5a,
  0x46,
  0x3c,
  0x0,
  0x0,
  0x44,
  0x7e,
  0x40,
  0x0,
  0x0,
  0x7a,
  0x4a,
  0x4a,
  0x4a,
  0x4e,
  0x0,
  0x42,
  0x4a,
  0x4a,
  0x4a,
  0x7e,
  0x0,
  0xe,
  0x8,
  0x8,
  0x8,
  0x7e,
  0x0,
  0x4e,
  0x4a,
  0x4a,
  0x4a,
  0x7a,
  0x0,
  0x7e,
  0x4a,
  0x4a,
  0x4a,
  0x7a,
  0x0,
  0x2,
  0x2,
  0x62,
  0x12,
  0xe,
  0x0,
  0x7e,
  0x4a,
  0x4a,
  0x4a,
  0x7e,
  0x0,
  0xe,
  0x4a,
  0x4a,
  0x4a,
  0x7e,
  0x0,
  0x0,
  0x6c,
  0x6c,
  0x0,
  0x0,
  0x0,
  0x0,
  0xcc,
  0x6c,
  0x0,
  0x0,
  0x0,
  0x10,
  0x28,
  0x44,
  0x82,
  0x0,
  0x0,
  0x24,
  0x24,
  0x24,
  0x24,
  0x24,
  0x0,
  0x0,
  0x82,
  0x44,
  0x28,
  0x10,
  0x0,
  0x3a,
  0x2a,
  0xaa,
  0x2a,
  0x2e,
  0x0,
  0x7f,
  0x41,
  0x5d,
  0x55,
  0x1f,
  0x0,
  0x7c,
  0xa,
  0xa,
  0xa,
  0x7c,
  0x0,
  0x7e,
  0x4a,
  0x4a,
  0x4a,
  0x34,
  0x0,
  0x3c,
  0x42,
  0x42,
  0x42,
  0x42,
  0x0,
  0x7e,
  0x42,
  0x42,
  0x42,
  0x3c,
  0x0,
  0x7e,
  0x4a,
  0x4a,
  0x4a,
  0x42,
  0x0,
  0x7e,
  0xa,
  0xa,
  0xa,
  0x2,
  0x0,
  0x3c,
  0x42,
  0x42,
  0x52,
  0x72,
  0x0,
  0x7e,
  0x8,
  0x8,
  0x8,
  0x7e,
  0x0,
  0x0,
  0x0,
  0x7e,
  0x0,
  0x0,
  0x0,
  0x2,
  0x42,
  0x42,
  0x42,
  0x3e,
  0x0,
  0x7e,
  0x8,
  0x8,
  0x14,
  0x62,
  0x0,
  0x7e,
  0x40,
  0x40,
  0x40,
  0x40,
  0x0,
  0x7e,
  0x4,
  0x8,
  0x4,
  0x7e,
  0x0,
  0x7e,
  0x4,
  0x8,
  0x10,
  0x7e,
  0x0,
  0x3c,
  0x42,
  0x42,
  0x42,
  0x3c,
  0x0,
  0x7e,
  0xa,
  0xa,
  0xa,
  0x4,
  0x0,
  0x3c,
  0x42,
  0x62,
  0xc2,
  0x7c,
  0x0,
  0x7e,
  0xa,
  0xa,
  0xa,
  0x74,
  0x0,
  0x44,
  0x4a,
  0x4a,
  0x4a,
  0x32,
  0x0,
  0x2,
  0x2,
  0x7e,
  0x2,
  0x2,
  0x0,
  0x3e,
  0x40,
  0x40,
  0x40,
  0x3e,
  0x0,
  0x1e,
  0x20,
  0x40,
  0x20,
  0x1e,
  0x0,
  0x3e,
  0x40,
  0x20,
  0x40,
  0x3e,
  0x0,
  0x62,
  0x14,
  0x8,
  0x14,
  0x62,
  0x0,
  0x6,
  0x8,
  0x78,
  0x8,
  0x6,
  0x0,
  0x42,
  0x62,
  0x5a,
  0x46,
  0x42,
  0x0,
  0x0,
  0xff,
  0x81,
  0x81,
  0x0,
  0x0,
  0x2,
  0x4,
  0x18,
  0x20,
  0x40,
  0x0,
  0x0,
  0x81,
  0x81,
  0xff,
  0x0,
  0x0,
  0x4,
  0x2,
  0x1,
  0x2,
  0x4,
  0x0,
  0x40,
  0x40,
  0x40,
  0x40,
  0x40,
  0x0,
  0x0,
  0x1,
  0x2,
  0x0,
  0x0,
  0x0,
  0x20,
  0x54,
  0x54,
  0x54,
  0x78,
  0x0,
  0x7e,
  0x48,
  0x48,
  0x48,
  0x30,
  0x0,
  0x38,
  0x44,
  0x44,
  0x44,
  0x44,
  0x0,
  0x30,
  0x48,
  0x48,
  0x48,
  0x7e,
  0x0,
  0x38,
  0x44,
  0x54,
  0x54,
  0x8,
  0x0,
  0x0,
  0x7c,
  0x12,
  0x2,
  0x0,
  0x0,
  0x18,
  0xa4,
  0xa4,
  0xa4,
  0x78,
  0x0,
  0x7e,
  0x10,
  0x10,
  0x10,
  0x60,
  0x0,
  0x0,
  0x0,
  0x7a,
  0x0,
  0x0,
  0x0,
  0x0,
  0x80,
  0x80,
  0x7a,
  0x0,
  0x0,
  0x7e,
  0x10,
  0x10,
  0x28,
  0x40,
  0x0,
  0x0,
  0x0,
  0x7e,
  0x40,
  0x0,
  0x0,
  0x7c,
  0x4,
  0x18,
  0x4,
  0x78,
  0x0,
  0x7c,
  0x4,
  0x4,
  0x4,
  0x78,
  0x0,
  0x38,
  0x44,
  0x44,
  0x44,
  0x38,
  0x0,
  0xfc,
  0x24,
  0x24,
  0x24,
  0x18,
  0x0,
  0x18,
  0x24,
  0x24,
  0x24,
  0xfc,
  0x0,
  0x7c,
  0x8,
  0x4,
  0x4,
  0x0,
  0x0,
  0x8,
  0x54,
  0x54,
  0x54,
  0x20,
  0x0,
  0x3c,
  0x48,
  0x48,
  0x48,
  0x8,
  0x0,
  0x3c,
  0x40,
  0x40,
  0x40,
  0x7c,
  0x0,
  0x1c,
  0x20,
  0x40,
  0x20,
  0x1c,
  0x0,
  0x3c,
  0x40,
  0x20,
  0x40,
  0x3c,
  0x0,
  0x44,
  0x28,
  0x10,
  0x28,
  0x44,
  0x0,
  0x1c,
  0xa0,
  0xa0,
  0xa0,
  0x7c,
  0x0,
  0x44,
  0x64,
  0x54,
  0x4c,
  0x44,
  0x0,
  0x8,
  0x36,
  0x41,
  0x41,
  0x0,
  0x0,
  0x0,
  0x0,
  0xff,
  0x0,
  0x0,
  0x0,
  0x0,
  0x41,
  0x41,
  0x36,
  0x8,
  0x0,
  0x8,
  0x4,
  0x8,
  0x10,
  0x8,
  0x0,
  0x30,
  0x28,
  0x24,
  0x28,
  0x30,
  0x0,
];
